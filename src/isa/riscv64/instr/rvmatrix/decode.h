/***************************************************************************************
* Copyright (c) 2020-2022 Institute of Computing Technology, Chinese Academy of Sciences
*
* NEMU is licensed under Mulan PSL v2.
* You can use this software according to the terms and conditions of the Mulan PSL v2.
* You may obtain a copy of Mulan PSL v2 at:
*          http://license.coscl.org.cn/MulanPSL2
*
* THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
* EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
* MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
*
* See the Mulan PSL v2 for more details.
***************************************************************************************/

#ifdef CONFIG_RVMATRIX
#include <common.h>
static inline def_DHelper(mopcfg) {
  //虽然指令格式各不相同，但先暂时将rs1,imm10,rd的idx值读出来放到Decode结构里，等EHelper里再分别取需要的部分
  s->src1.reg = s->isa.instr.mcfg.rs1;
  s->src2.imm = (sword_t)s->isa.instr.mcfgi.imm10;
  s->dest.reg = s->isa.instr.mcfg.rd;
  s->m_eew = mtype->msew;
  s->m_width = 1 << s->m_eew;
}

static inline def_DHelper(mldst) {
  s->src1.reg = s->isa.instr.mldst.rs1;
  s->src2.reg = s->isa.instr.mldst.rs2;
  s->dest.reg = s->isa.instr.mldst.md;
  s->m_eew = s->isa.instr.mldst.eew;
  if (s->m_eew == 4) {
    s->m_eew = mtype->msew;
  }
  s->m_width = 1 << s->m_eew;
}

static inline def_DHelper(mcompute) {
  s->src1.reg = s->isa.instr.mcompute.ms1;
  s->src2.reg = s->isa.instr.mcompute.ms2;
  s->dest.reg = s->isa.instr.mcompute.md;
  s->m_eew = mtype->msew;
  if (s->m_eew == 4) {
    s->m_eew = mtype->msew;
  }
  s->m_width = 1 << s->m_eew;
}

static inline def_DHelper(msync) {
  s->src1.reg = (sword_t)s->isa.instr.msync.rs1;
  s->src2.imm = (sword_t)s->isa.instr.msync.rs2;
}

def_THelper(mopcfg) {
  def_INSTR_TAB("000000 000000 ????? 100 ????? ????? ??", msettype);
  def_INSTR_TAB("000000 1????? ????? 100 ????? ????? ??", msettypei);
  def_INSTR_TAB("000000 1????? ????? 101 ????? ????? ??", msettypehi);
  // def_INSTR_TAB("000000 1????? ?0000 110 ????? ????? ??", msetsew);
  // def_INSTR_TAB("000000 1????? ?0001 110 ????? ????? ??", msetint4);
  // def_INSTR_TAB("000000 1????? ?0010 110 ????? ????? ??", msetint8);
  // def_INSTR_TAB("000000 1????? ?0011 110 ????? ????? ??", msetint16);
  // def_INSTR_TAB("000000 1????? ?0100 110 ????? ????? ??", msetint32);
  // def_INSTR_TAB("000000 1????? ?0101 110 ????? ????? ??", msetint64);
  // def_INSTR_TAB("000000 1????? ?0110 110 ????? ????? ??", msetfp8);
  // def_INSTR_TAB("000000 1????? ?0111 110 ????? ????? ??", msetfp16);
  // def_INSTR_TAB("000000 1????? ?1000 110 ????? ????? ??", msetfp32);
  // def_INSTR_TAB("000000 1????? ?1001 110 ????? ????? ??", msetfp64);
  // def_INSTR_TAB("000000 1????? ?1010 110 ????? ????? ??", msetba);
  def_INSTR_TAB("000001 1????? ????? 101 ????? ????? ??", msettilemi);
  def_INSTR_TAB("000001 000000 ????? 101 ????? ????? ??", msettilem);
  def_INSTR_TAB("000001 1????? ????? 110 ????? ????? ??", msettileki);
  def_INSTR_TAB("000001 000000 ????? 110 ????? ????? ??", msettilek);
  def_INSTR_TAB("000001 1????? ????? 100 ????? ????? ??", msettileni);
  def_INSTR_TAB("000001 000000 ????? 100 ????? ????? ??", msettilen);
  
  return EXEC_ID_inv;
}

def_THelper(mldst) {
  //             funct6 ls rs2   rs1   eew tr md   opcode
  def_INSTR_TAB("000001 0  ????? ????? ??? 0  ???? ????? ??", mla);
  def_INSTR_TAB("000010 0  ????? ????? ??? 0  ???? ????? ??", mlb);
  def_INSTR_TAB("000000 0  ????? ????? ??? 0  ???? ????? ??", mlc);
  def_INSTR_TAB("000001 0  ????? ????? ??? 1  ???? ????? ??", mlat);
  def_INSTR_TAB("000010 0  ????? ????? ??? 1  ???? ????? ??", mlbt);
  def_INSTR_TAB("000000 0  ????? ????? ??? 1  ???? ????? ??", mlct);
  
  def_INSTR_TAB("000001 1  ????? ????? ??? 0  ???? ????? ??", msa);
  def_INSTR_TAB("000010 1  ????? ????? ??? 0  ???? ????? ??", msb);
  def_INSTR_TAB("000000 1  ????? ????? ??? 0  ???? ????? ??", msc);
  def_INSTR_TAB("000001 1  ????? ????? ??? 1  ???? ????? ??", msat);
  def_INSTR_TAB("000010 1  ????? ????? ??? 1  ???? ????? ??", msbt);
  def_INSTR_TAB("000000 1  ????? ????? ??? 1  ???? ????? ??", msct);

  def_INSTR_TAB("000011 0  ????? ????? ??? 0  ???? ????? ??", mltr);
  def_INSTR_TAB("000011 0  ????? ????? ??? 1  ???? ????? ??", mlacc);
  def_INSTR_TAB("000011 1  ????? ????? ??? 0  ???? ????? ??", mstr);
  def_INSTR_TAB("000011 1  ????? ????? ??? 1  ???? ????? ??", msacc);
  
  return EXEC_ID_inv;
}

def_THelper(msync) {
  def_INSTR_TAB("110000 0 ????? ????? ??? ? ???? ????? ??", msyncreset);
  def_INSTR_TAB("110001 0 ????? ????? ??? ? ???? ????? ??", mrelease);
  def_INSTR_TAB("110010 0 ????? ????? ??? ? ???? ????? ??", macquire);
  
  return EXEC_ID_inv;
}


def_THelper(mcompute) {
  //             funct6 fp sa ms2  sn ms1  eew ma md   opcode
  def_INSTR_TAB("001000 0  0  ???? 0  ???? ??? 1  ???? ????? ??", mmau);
  def_INSTR_TAB("001000 0  1  ???? 0  ???? ??? 1  ???? ????? ??", msmau);
  def_INSTR_TAB("001000 0  0  ???? 1  ???? ??? 1  ???? ????? ??", mma);
  def_INSTR_TAB("001000 0  1  ???? 1  ???? ??? 1  ???? ????? ??", msma);
  def_INSTR_TAB("001000 1  0  ???? 0  ???? ??? 1  ???? ????? ??", mfma);

  def_INSTR_TAB("001001 0  0  ???? 0  ???? ??? 1  ???? ????? ??", mwmau);
  def_INSTR_TAB("001001 0  1  ???? 0  ???? ??? 1  ???? ????? ??", mswmau);
  def_INSTR_TAB("001001 0  0  ???? 1  ???? ??? 1  ???? ????? ??", mwma);
  def_INSTR_TAB("001001 0  1  ???? 1  ???? ??? 1  ???? ????? ??", mswma);
  def_INSTR_TAB("001001 1  0  ???? 0  ???? ??? 1  ???? ????? ??", mfwma);

  def_INSTR_TAB("001010 0  0  ???? 0  ???? ??? 1  ???? ????? ??", mqmau);
  def_INSTR_TAB("001010 0  1  ???? 0  ???? ??? 1  ???? ????? ??", msqmau);
  def_INSTR_TAB("001010 0  0  ???? 1  ???? ??? 1  ???? ????? ??", mqma);
  def_INSTR_TAB("001010 0  1  ???? 1  ???? ??? 1  ???? ????? ??", msqma);
  
  return EXEC_ID_inv;
}


// All RVMatrix instructions decode start from here
def_THelper(OP_M) { // 11_101
  def_INSTR_IDTAB("0000??? ????? ????? 1?? ????? ????? ??", mopcfg, mopcfg);
  def_INSTR_IDTAB("?000??? ????? ????? 0?? ????? ????? ??", mldst, mldst);
  def_INSTR_IDTAB("1100??? ????? ????? ??? ????? ????? ??", msync, msync);
  def_INSTR_IDTAB("??????? ????? ????? ??? ????? ????? ??", mcompute, mcompute);

  return EXEC_ID_inv;
}

#endif // CONFIG_RVMATRIX
